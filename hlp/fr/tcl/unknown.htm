<HTML><HEAD>
<BASEFONT FACE="Times New Roman" SIZE="2" COLOR="#000000">
</HEAD>
<BODY>
<div><H3><b>unknown&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Commandes Internes Tcl</b></H3></div>
<HR ALIGN="center">
<div><b>NOM</b></div><br>
<div ALIGN="LEFT" style="margin-left: 51px;">unknown- Gère les tentatives d'utiliser des commandes inexistantes 
</div><br>
<div><b>SYNTAXE</b></div><br>
<div ALIGN="LEFT" style="margin-left: 51px;"><b>unknown </b><i>cmdName </i>?<i>arg arg ...</i>?
</div><br>
<div><b>DESCRIPTION</b></div><br>
<div ALIGN="LEFT" style="margin-left: 51px;">Cette commande est appelée par l'interpréteur Tcl chaque fois qu'un script essaie d'appeler une commande qui n'existe pas. L'implémentation d'<b>unknown</b> ne fait pas partie du noyau Tcl; en fait, c'est une fonction de bibliothèque définie par défaut quand Tcl démarre. Vous pouvez surcharger <b>unknown</b> pour changer sa fonctionalité. </div>
<div ALIGN="LEFT" style="margin-left: 51px;">Si l'interpréteur Tcl rencontre un nom de commande pour lequel il n'y a pas de commande définie, alors Tcl vérifie l'existence d'une commande nommée <b>unknown</b>. S'il n'y a pas de commande de ce nom, alors l'interpréteur retourne une erreur. Si la commande <b>unknown</b> existe, alors elle est appelée avec les arguments consistant des nom et arguments pleinement-substitués de la commande originale inexistante. La commande <b>unknown</b> typiquement fait des choses comme chercher à travers des répertoires de bibliothèque une commande avec le nom <i>cmdName</i>, ou expanser un nom de commande abrégé, ou exécuter automatiquement des commandes inconnues en tant que sous-processus. Dans quelques cas (tel que l'expansion d'abréviations) <b>unknown</b> changera légèrement la commande originale et alors la (re-)exécutera. Le résultat de la commande <b>unknown</b> est utilisé comme résultat de la commande inexistante originale. </div>
<div ALIGN="LEFT" style="margin-left: 51px;">L'implémentation par défaut d'<b>unknown</b> se comporte comme suit. Elle appelle en premier la fonction de bibliothèque<A HREF="129.htm"><b> auto_load</b></A> pour charger la commande. Si cela réussit, alors elle exécute la commande originale avec ses arguments originaux. Si l'auto-load échoue alors <b>unknown</b> appelle <A HREF="129.htm"><b>auto_execok</b></A> pour voir si il y a un fichier exécutable de nom <i>cmd</i>. Si c'est le cas, elle appelle la commande Tcl <A HREF="105.htm"><b>exec</b></A> avec <i>cmd</i> et tout les <i>args</i> comme aguments. Si <i>cmd</i> peut être auto-exécuté, <b>unknown</b> verifie si la commande a été appelée au premier plan et en dehors de quelconque script Si c'est le cas, alors <b>unknown</b> suit deux étapes supplémentaires. D'abord, elle regarde si <i>cmd</i> a une des trois formes suivantes: <b>!!</b>, <b>!</b><i></i><A HREF="277.htm"><i>event</i></A>, ou <b>^</b><i>old</i><b>^</b><i>new</i>?<b>^</b>?. Si c'est le cas, alors <b>unknown</b> produit des substitutions d'historique de la même façon que <b>csh</b> pour ces constructions. Finalement, <b>unknown</b> verifie si <i>cmd</i> est une abréviation unique d'une commande Tcl existante. Si c'est le cas, elle expanse le nom de la commande et exécute la commande avec les arguments originaux. Si aucun des efforts précédents n'ont pu exécuter la commande, <b>unknown</b> génère une erreur. Si la variable globale <b>auto_noload</b> est définie, alors l'étape auto-load est sautée. Si la variable globale <b>auto_noexec</b> est définie alors l'étape auto-exec est sautée. Sous des circonstances normales la valeur de retour de <b>unknown</b> est la valeur de retour de la commande qui a été éventuellement exécutée.</div>
<br>
<br><div ALIGN="CENTER"><A HREF="index.htm"><b>Index</b></A>&nbsp;&nbsp;<A HREF="173.htm"><b>Précédent</b></A>&nbsp;&nbsp;<A HREF="175.htm"><b>Suivant</b></A></div>
</BODY></HTML>
